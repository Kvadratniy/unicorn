// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Общая модель пользователя
model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  // ПОЛЯ СВЯЗЕЙ
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
}

// Модель профиля пользователя
// Является ключевой моделью пользователя
model Profile {
  id               Int                  @id @default(autoincrement())
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  role             Role                 @default(ADMIN)
  name             String
  phone            String
  about            String?
  // ПОЛЯ СВЯЗЕЙ
  // Связанный пользователь системы
  userId           Int?                 @unique
  user             User?                @relation(fields: [userId], references: [id])
  // Бронирования, которые пользователь создал
  createdBookings  Booking[]
  // Завершенные визиты, где пользователь является учеником
  completedVisits  CompletedVisit[]
  // Список всех абонементов пользователя
  abonnements       Abonnement[]
  // Услуги которые пользователя может оказывать
  services         ProfileToService[]
  // Бронирования где пользователь клиент
  bookings         BookingToStudents[]
  // Бронирования, где пользователь учитель
  employeeBookings BookingToEmployees[]
  // Список смен пользователя
  shifts           Shift[]
}

model Shift {
  id         Int      @id @default(autoincrement())
  date       DateTime // Конкретная дата смены
  startTime  DateTime // Время начала смены
  endTime    DateTime // Время окончания смены
  employeeId Int
  employee   Profile  @relation(fields: [employeeId], references: [id])

  // Проверка на то, что время начала должно быть раньше времени окончания
  @@index(fields: [employeeId])
}

// Модель бронирования, связывающая клиента, работника, услугу и локацию.
model Booking {
  id             Int                  @id @default(autoincrement())
  comment        String?
  startDate      DateTime
  endDate        DateTime
  status         BookingStatus        @default(PLANED)
  // Кто создал
  creatorId      Int
  creator        Profile              @relation(fields: [creatorId], references: [id])
  // Список кабинетов которые бронируют
  locations      BookingToLocation[]
  // Список учеников которые участвуют
  students       BookingToStudents[]
  // Список работников кто учавствует
  employees      BookingToEmployees[]
  // Список услуг которые оказываются
  services       BookingToService[]
  // Связанная запись завершенного визита
  completedVisit CompletedVisit?
}

//  Модель помещений
model Location {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // ПОЛЯ СВЯЗЕЙ
  // Список бронирований данного помещения
  bookings BookingToLocation[]
  // Список услуг оказываемых в этой комнате
  services LocationToService[]
}

// Модель услуг
model Service {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // ПОЛЯ СВЯЗЕЙ
  // Профили которые оказывают данную услугу
  profiles   ProfileToService[]
  // Комнаты в которых оказывается данная услуга
  locations  LocationToService[]
  // Список бронирований данной услуги
  bookings   BookingToService[]
  // Абонементы с этой услугой
  abonnements abonnementTypeToService[]
}

//  Модель типа абонемента +
model AbonnementType {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String
  price           Decimal
  numberOfLessons Int?
  monthDuration   Int

  // ПОЛЯ СВЯЗЕЙ
  // Услуга в данном абонементе
  services   abonnementTypeToService[]
  // Список абонементов созданных с таким типом
  abonnements Abonnement[]
}

//  Модель абонемент
model Abonnement {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  endDateAt DateTime
  // Статус абонемента
  status    String   @default("active")

  // ПОЛЯ СВЯЗЕЙ
  // Тип абонемента
  abonnementTypeId Int
  abonnementType  AbonnementType   @relation(fields: [abonnementTypeId], references: [id])
  // Профиль к которому привязан абонемент
  profileId       Int
  profile         Profile          @relation(fields: [profileId], references: [id])
  // Визиты по абонементу
  completedVisits CompletedVisit[]
}

model CompletedVisit {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ПОЛЯ СВЯЗЕЙ
  // Связанная запись бронирования
  bookingId   Int         @unique
  booking     Booking     @relation(fields: [bookingId], references: [id])
  // ?
  profileId   Int
  profile     Profile     @relation(fields: [profileId], references: [id])
  // Абонемент по которому был визит
  abonnementId Int?
  abonnement   Abonnement? @relation(fields: [abonnementId], references: [id])
}

model ProfileToService {
  profileId Int
  serviceId Int
  profile   Profile @relation(fields: [profileId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([profileId, serviceId])
}

model LocationToService {
  locationId Int
  serviceId  Int
  location   Location @relation(fields: [locationId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])

  @@id([locationId, serviceId])
}

model abonnementTypeToService {
  abonnementTypeId Int
  serviceId       Int
  abonnementType  AbonnementType @relation(fields: [abonnementTypeId], references: [id])
  service         Service        @relation(fields: [serviceId], references: [id])

  @@id([abonnementTypeId, serviceId])
}

model BookingToLocation {
  bookingId  Int
  locationId Int
  booking    Booking  @relation(fields: [bookingId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  @@id([locationId, bookingId])
}

model BookingToService {
  bookingId Int
  serviceId Int
  booking   Booking @relation(fields: [bookingId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([bookingId, serviceId])
}

model BookingToEmployees {
  bookingId Int
  profileId Int
  booking   Booking @relation(fields: [bookingId], references: [id])
  profile   Profile @relation(fields: [profileId], references: [id])

  @@id([bookingId, profileId])
}

model BookingToStudents {
  bookingId Int
  profileId Int
  booking   Booking @relation(fields: [bookingId], references: [id])
  profile   Profile @relation(fields: [profileId], references: [id])

  @@id([bookingId, profileId])
}

enum Role {
  ADMIN
  WORKER
  CLIENT
}

enum BookingStatus {
  AGREEMENT
  PLANED
  REJECTED
  COMPLITED
}
